1. 기존 OpenCV 버전 제거 
1-1. OpenCV 2.4대 버전이 설치되어 있으면 새로 설치하는 OpenCV 4.1.2 버전이 제대로 동작하지 않기 때문에 제거해주어야 합니다.

1-2. 아래처럼 보이면 OpenCV 2.4대 버전이 설치안되어 있는 상태입니다. 2장을 진행하세요. 
pi@raspberrypi:~ $ pkg-config --modversion opencv
Package opencv was not found in the pkg-config search path.
Perhaps you should add the directory containing `opencv.pc'
to the PKG_CONFIG_PATH environment variable
No package 'opencv' found

OpenCV 2.4대 버전이 설치되어 있는 경우에는 OpenCV  2.4 버전이 출력됩니다.

pi@raspberrypi:~ $  pkg-config --modversion opencv
2.4.9.1

다음 명령으로 OpenCV 라이브러리 설정 파일을 포함해서 기존에 설치된 OpenCV 패키지를 삭제하고 진행해야 합니다. 
pi@raspberrypi:~ $ sudo apt-get purge  libopencv* python-opencv
pi@raspberrypi:~ $ sudo apt-get autoremove

1-3. 컴파일하여 설치한 경우 다음처럼 OpenCV 버전을 확인할 수 있습니다. 
pi@raspberrypi:~ $ pkg-config --modversion opencv
3.4.2

또는

pi@raspberrypi:~ $ pkg-config --modversion opencv4
4.1.2

다음 명령으로 기존에 설치된 opencv 라이브러리를 삭제합니다. 
pi@raspberrypi:~ $ sudo find /usr/local/ -name "*opencv*" -exec rm  {} \;

2. 기존 설치된 패키지 업그레이드
2-0. 진행하면서 패키지가 많이 설치되기 때문에  속도를 올리기위해  라즈비안에서 패키지 다운로드하는 곳을 변경합니다.
https://www.raspbian.org/RaspbianMirrors 에서 South Korea를 찾아 주소를 복사합니다. 
여기에서는  http://ftp.kaist.ac.kr/raspbian/raspbian/를 사용하겠습니다. 

sources.list를 열어서 다음처럼 수정합니다. 

pi@raspberrypi:~ $ sudo nano /etc/apt/sources.list

수정전
deb http://raspbian.raspberrypi.org/raspbian/ buster main contrib non-free rpi
수정후
deb http://ftp.kaist.ac.kr/raspbian/raspbian/ buster main contrib non-free rpi
일부 패키지는 라즈베리파이재단(?)의 패키지 저장소에서 가져오기 때문에 패키지 다운로드 속도를 올릴 수 있는 확실한 방법은 아닙니다.  

2-1. OpenCV 4.1.2을 설치해주기 전에 기존에 설치된 패키지들을 업그레이드 해주기 위한 작업입니다. 
오래 걸리더라도 해주는 것이 좋습니다. 

2-2. 기존에 설치된 패키지의 새로운 버전이 저장소에 있다면 패키지 리스트를 업데이트합니다. 
여기에서 에러가 난다면 앞에서 추가한 주소를 다른 곳으로 변경해보세요. 
pi@raspberrypi:~ $ sudo apt-get update 

2-3. 기존에 설치된 패키지의 새로운 버전이 있으면 업그레이드합니다.
pi@raspberrypi:~ $ sudo apt-get upgrade

업데이트한 패키지가 모두 적용되도록 재부팅후 진행합니다. 

3. OpenCV 컴파일 전 필요한 패키지 설치
3-1. OpenCV를 컴파일하는데 필요한 패키지들을 설치합니다. 
일부 패키지는 배포된 Raspbian 이미지에 이미 포함되어 있는 경우도 있습니다.
또는 다른 패키지 설치시 같이 설치되기도 하지만 필요한 패키지들이라 언급하도록 하겠습니다. 

3-2. build-essential 패키지에는 C/C++ 컴파일러와 관련 라이브러리, make 같은 도구들이 포함되어 있습니다.
cmake는 컴파일 옵션이나 빌드된 라이브러리에 포함시킬 OpenCV 모듈 설정등을 위해 필요합니다. 
$ sudo apt-get install build-essential cmake

3-3. 특정 포맷의 이미지 파일을 불러오거나 기록하기 위해 필요한 패키지들입니다.
$ sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev

3-4. 특정 코덱의 비디오 파일을 읽어오거나 기록하기 위해 필요한 패키지들입니다.
$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libxvidcore-dev libx264-dev libxine2-dev

3-5. Video4Linux 패키지는 리눅스에서 실시간 비디오 캡처를 지원하기 위한 디바이스 드라이버와 API를 포함하고 있습니다. 
$ sudo apt-get install libv4l-dev v4l-utils

3-6. GStreamer는 비디오 스트리밍을 위한 라이브러리입니다. 
$ sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev 

3-7. OpenCV에서는 highgui 모듈을 사용하여 자체적으로 윈도우 생성하여 이미지나 비디오들을 보여줄 수 있습니다. 
윈도우 생성 등의 GUI를 위해 gtk 또는 qt를 선택해서 사용가능합니다.  여기서는 gtk2를 지정해주었습니다.
$ sudo apt-get install libgtk2.0-dev

그외 선택 가능한 패키지는 다음과 같습니다.
libgtk-3-dev
libqt4-dev
libqt5-dev

3-8. OpenGL 지원하기 위해 필요한 라이브러리입니다.
$ sudo apt-get install mesa-utils libgl1-mesa-dri libgtkgl2.0-dev libgtkglext1-dev   

3-9. OpenCV 최적화를 위해 사용되는 라이브러리들입니다.
$ sudo apt-get install libatlas-base-dev gfortran libeigen3-dev

3-10. python2.7-dev와 python3-dev 패키지는 OpenCV-Python 바인딩을 위해 필요한 패키지들입니다. 
Numpy는 매트릭스 연산등을 빠르게 처리할 수 있어서 OpenCV Python에서 사용됩니다. 
$ sudo apt-get install python2.7-dev python3-dev python-numpy python3-numpy

4. OpenCV 설정과 컴파일 및 설치
4-1. 소스 코드를 저장할 임시 디렉토리를 생성하여 이동 후.. 진행합니다
pi@raspberrypi:~ $ mkdir opencv
pi@raspberrypi:~ $ cd opencv
pi@raspberrypi:~/opencv $

4-2. OpenCV 4.1.2 소스코드를 다운로드 받아 압축을 풀어줍니다.
$ wget -O opencv.zip https://github.com/opencv/opencv/archive/4.1.2.zip
$ unzip opencv.zip

4-3. opencv_contrib(extra modules) 소스코드를 다운로드 받아 압축을 풀어줍니다.
SIFT, SURF 등을 사용하기 위해 필요합니다.
$ wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.1.2.zip
$ unzip opencv_contrib.zip

4-4. 다음처럼 두 개의 디렉토리가 생성됩니다. 
pi@raspberrypi:~/opencv $  ls -d */
opencv-4.1.2  opencv_contrib-4.1.2

4-5. opencv-4.1.2 디렉토리로 이동하여 build 디렉토리를 생성하고 build 디렉토리로 이동합니다.
컴파일은 build 디렉토리에서 이루어집니다.
pi@raspberrypi:~/opencv $  cd opencv-4.1.2
pi@raspberrypi:~/opencv/opencv-4.1.2 $  mkdir build
pi@raspberrypi:~/opencv/opencv-4.1.2 $  cd build
pi@raspberrypi:~/opencv/opencv-4.1.2/build $  

4-6. cmake를 사용하여 OpenCV 컴파일 설정을 해줍니다.  복사해서 터미널에 붙여넣기 해주면 됩니다. 
다음 옵션은 빌드할 OpenCV 버전에 맞추어 아래 경로중 빨간색 부분을 변경하세요. 
-D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.1.2/modules 

Non free 모듈을 사용하려면 다음 옵션을 추가하세요.
-D OPENCV_ENABLE_NONFREE=ON  

cmake -D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D WITH_TBB=OFF \
-D WITH_IPP=OFF \
-D WITH_1394=OFF \
-D BUILD_WITH_DEBUG_INFO=OFF \
-D BUILD_DOCS=OFF \
-D INSTALL_C_EXAMPLES=ON \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D BUILD_EXAMPLES=OFF \
-D BUILD_TESTS=OFF \
-D BUILD_PERF_TESTS=OFF \
-D ENABLE_NEON=ON \
-D ENABLE_VFPV3=ON \
-D WITH_QT=OFF \
-D WITH_GTK=ON \
-D WITH_OPENGL=ON \
-D OPENCV_ENABLE_NONFREE=ON \
-D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.1.2/modules \
-D WITH_V4L=ON \
-D WITH_FFMPEG=ON \
-D WITH_XINE=ON \
-D ENABLE_PRECOMPILED_HEADERS=OFF \
-D BUILD_NEW_PYTHON_SUPPORT=ON \
-D OPENCV_GENERATE_PKGCONFIG=ON ../

4-7. 다음처럼 cmake 실행 중에  추가적인 다운로드가  있습니다.  라즈베리파이에 인터넷이 연결된 상태에서 진행하세요..
-- xfeatures2d/boostdesc: Download: boostdesc_bgm.i
-- xfeatures2d/boostdesc: Download: boostdesc_bgm_bi.i
-- xfeatures2d/boostdesc: Download: boostdesc_bgm_hd.i
-- xfeatures2d/boostdesc: Download: boostdesc_binboost_064.i
-- xfeatures2d/boostdesc: Download: boostdesc_binboost_128.i
-- xfeatures2d/boostdesc: Download: boostdesc_binboost_256.i
-- xfeatures2d/boostdesc: Download: boostdesc_lbgm.i
-- xfeatures2d/vgg: Download: vgg_generated_48.i
-- xfeatures2d/vgg: Download: vgg_generated_64.i
-- xfeatures2d/vgg: Download: vgg_generated_80.i
-- xfeatures2d/vgg: Download: vgg_generated_120.i
-- data: Download: face_landmark_model.dat

4-8. 다음과 같은 메시지가 보이면 정상적으로 된 것입니다.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pi/opencv/opencv-4.1.2/build

4-9. 진행하기 전에 스왑(swap) 공간을 늘려줘야 멀티코어를 사용하여 컴파일시 메모리 부족으로 에러가 나지 않습니다.
( 참고 https://www.pyimagesearch.com/2017/10/09/optimizing-opencv-on-the-raspberry-pi/ )
/etc/dphys-swapfile 파일을 열어서 
$ sudo nano /etc/dphys-swapfile

CONF_SWAPSIZE  변수값을 100에서 2048로 수정합니다.
# set size to absolute value, leaving empty (default) then uses computed value
#   you most likely don't want this, unless you have an special disk situation
# CONF_SWAPSIZE=100
CONF_SWAPSIZE=2048

스왑 서비스 재시작하여 변경된 설정을 반영시켜주면 스왑 크기가 대략 20배가 됩니다. 

pi@raspberrypi:~/opencv/opencv-4.1.2/build $ free
              total        used        free      shared  buff/cache   available
Mem:         896672       79656       64716       11840      752300      739640
Swap:        102396           0      102396

100 메가 였던 Swap이

pi@raspberrypi:~/opencv/opencv-4.1.2/build $ sudo /etc/init.d/dphys-swapfile restart
[ ok ] Restarting dphys-swapfile (via systemctl): dphys-swapfile.service.

pi@raspberrypi:~/opencv/opencv-4.1.2/build $ free
              total        used        free      shared  buff/cache   available
Mem:         896668       86292       63540       18036      746836      726832
Swap:       2097148           0     2097148
2048메가로 바뀝니다. 

4-10. 이제 make 명령을 사용하여 컴파일을 시작합니다.  -j4 옵션을 주고 우선 진행합니다.   
pi@raspberrypi:~/opencv/opencv-4.1.2/build $ time make -j4


라즈비안 2019년 9월 26일 버전과 OpenCV 4.1.2을 사용했을 때에 문제 없이 완료된 것입니다. 
사용한 조합이 다르면 문제가 생길 수도 있습니다. 
혹, python 라이브러리 빌드하는 부분에서 다음처럼 오랫동안 멈춤 현상이 있는 경우 . Ctrl + C를 눌러 중지하고 
make 명령으로 다시 진행해서 완료하면 됩니다. 
pi@raspberrypi:~/opencv/opencv-4.1.2/build $ make

4-11. 이제 컴파일 결과물을 설치합니다.
pi@raspberrypi:~/opencv/opencv-4.1.2/build $ sudo make install

샘플 코드들은 /usr/local/share/opencv4/samples/ 위치에 복사됩니다. 

4-12. opencv  라이브러리를 찾을 수 있도록 다음 명령을 실행합니다.
pi@raspberrypi:~/opencv/opencv-4.1.2/build $ sudo ldconfig

4-13. /etc/dphys-swapfile 파일을 열어서 
$ sudo nano /etc/dphys-swapfile

CONF_SWAPSIZE  변수값을 다시 100으로 수정합니다.

# set size to absolute value, leaving empty (default) then uses computed value
#   you most likely don't want this, unless you have an special disk situation
CONF_SWAPSIZE=100

스왑 서비스 재시작하여 변경된 설정을 반영시켜주면 스왑 크기가 원래대로 돌아옵니다. 

pi@raspberrypi:~/opencv/opencv-4.1.2/build $ sudo /etc/init.d/dphys-swapfile restart
[ ok ] Restarting dphys-swapfile (via systemctl): dphys-swapfile.service.

pi@raspberrypi:~/opencv/opencv-4.1.2/build $ free
              total        used        free      shared  buff/cache   available
Mem:         896672       85660      220784       22084      590228      725888
Swap:        102396           0      102396

5. OpenCV 설치 결과 확인 
5.1. C/C++
5.1.1. OpenCV 4.x에서는 옵션으로 opencv대신에 opencv4를 사용하면 pkg-config를 사용하여 컴파일할 수 있습니다. 

$  g++ -o videocapture_basic /usr/local/share/opencv4/samples/cpp/videocapture_basic.cpp $(pkg-config opencv4 --libs --cflags)

5.1.2. 테스트를 하기 위해  필요한 웹캠 또는 Raspberry Pi Camera(pi camera)를  Raspberry Pi에  연결합니다.
대부분의 웹캠은 연결후 dmesg | tail 명령어로 해당 웹캠을 확인시 다음처럼 문제 없이 인식이 됩니다. 
인식이 안되면 해당 웹캠을 위한 디바이스 드라이버를 설치해줘야 합니다.

다음처럼 /dev/video0 디바이스 파일이 생성되었는지 확인해봅니다.
pi@raspberrypi:~/opencv/opencv-4.1.2/build $ ls /dev/video*
/dev/video0

파이 카메라의 경우에는 다음 명령으로 /dev/video0 장치를 만들어줘야 합니다.
sudo modprobe bcm2835-v4l2

파이 카메라의 경우 추가로 소스코드를 수정해야 합니다. open 함수의 아규먼트를 -1로 해야 정상적으로 동작합니다. 0으로 하면 카메라를 열지 못하고 무한 대기 상태에 빠지게 됩니다. 

//cap.open(deviceID + apiID);
cap.open(-1);


실행시켜보면 웹캠 영상이 보입니다. 
$ ./videocapture_basic

실행에 문제가 있는 경우 웹캠을 연결한채 재부팅하고나서 VNC를 사용하여 진행하세요.

5.1.4. CMake를 사용하는 방법입니다. 예제 코드를 하나 가져와서 컴파일 해보겠습니다.
pi@raspberrypi:~ $ mkdir example
pi@raspberrypi:~ $ cd example
pi@raspberrypi:~/example $ cp /usr/local/share/opencv4/samples/cpp/videocapture_basic.cpp ./

CMakeLists.txt 파일을 생성하여 다음 내용을 복사합니다.
pi@raspberrypi:~/example $ nano CMakeLists.txt 

cmake_minimum_required(VERSION 2.8)
project( videocapture_basic)
find_package( OpenCV REQUIRED )
include_directories( ${OpenCV_INCLUDE_DIRS} )
add_executable( videocapture_basic videocapture_basic.cpp )
target_link_libraries( videocapture_basic ${OpenCV_LIBS} )

build 디렉토리를 생성하여 컴파일을 진행합니다. 
pi@raspberrypi:~/example $ mkdir build
pi@raspberrypi:~/example $ cd build
pi@raspberrypi:~/example/build $ cmake ..
pi@raspberrypi:~/example/build $ make

실행시켜보면 웹캠 영상이 보입니다. 
$ ./videocapture_basic

5.2. Python
5.2.1. python 2와 python 3에서 opencv 라이브러리를 사용가능한지는 확인합니다.
각각 OpenCV 버전이 출력되어야 합니다.
pi@raspberrypi:~/opencv/opencv-4.1.2/build $ python
Python 2.7.16 (default, Apr  6 2019, 01:42:57)
[GCC 8.2.0] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import cv2
>>> cv2.__version__
'4.1.2'

pi@raspberrypi:~/opencv/opencv-4.1.2/build $ python3
Python 3.7.3 (default, Apr  3 2019, 05:39:12)
[GCC 8.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import cv2
>>> cv2.__version__
'4.1.2'

5.2.2. 파이 카메라의 경우  도 0 대신에 다음처럼 -1을 사용해야 합니다. 
cap = cv.VideoCapture(-1)
 
5.2.3. 예제 코드를 실행해봅니다. 웹캠 영상을 볼 수 있습니다. 
$ python /usr/local/share/opencv4/samples/python/video.py
$ python3 /usr/local/share/opencv4/samples/python/video.py
이제 필요 없어진 컴파일에 사용했던 opencv 소스코드 디렉토리를 삭제합니다.

pi@raspberrypi:~/opencv/opencv-4.1.2/build $ cd
pi@raspberrypi:~ $ rm -rf opencv
